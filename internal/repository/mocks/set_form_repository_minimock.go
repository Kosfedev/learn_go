// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Kosfedev/learn_go/internal/repository.SetFormRepository -o set_form_repository_minimock.go -n SetFormRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Kosfedev/learn_go/internal/model"
	"github.com/gojuno/minimock/v3"
)

// SetFormRepositoryMock implements mm_repository.SetFormRepository
type SetFormRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetWithQuestions          func(ctx context.Context, setID int64) (sp1 *model.SetForm, err error)
	funcGetWithQuestionsOrigin    string
	inspectFuncGetWithQuestions   func(ctx context.Context, setID int64)
	afterGetWithQuestionsCounter  uint64
	beforeGetWithQuestionsCounter uint64
	GetWithQuestionsMock          mSetFormRepositoryMockGetWithQuestions
}

// NewSetFormRepositoryMock returns a mock for mm_repository.SetFormRepository
func NewSetFormRepositoryMock(t minimock.Tester) *SetFormRepositoryMock {
	m := &SetFormRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetWithQuestionsMock = mSetFormRepositoryMockGetWithQuestions{mock: m}
	m.GetWithQuestionsMock.callArgs = []*SetFormRepositoryMockGetWithQuestionsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSetFormRepositoryMockGetWithQuestions struct {
	optional           bool
	mock               *SetFormRepositoryMock
	defaultExpectation *SetFormRepositoryMockGetWithQuestionsExpectation
	expectations       []*SetFormRepositoryMockGetWithQuestionsExpectation

	callArgs []*SetFormRepositoryMockGetWithQuestionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// SetFormRepositoryMockGetWithQuestionsExpectation specifies expectation struct of the SetFormRepository.GetWithQuestions
type SetFormRepositoryMockGetWithQuestionsExpectation struct {
	mock               *SetFormRepositoryMock
	params             *SetFormRepositoryMockGetWithQuestionsParams
	paramPtrs          *SetFormRepositoryMockGetWithQuestionsParamPtrs
	expectationOrigins SetFormRepositoryMockGetWithQuestionsExpectationOrigins
	results            *SetFormRepositoryMockGetWithQuestionsResults
	returnOrigin       string
	Counter            uint64
}

// SetFormRepositoryMockGetWithQuestionsParams contains parameters of the SetFormRepository.GetWithQuestions
type SetFormRepositoryMockGetWithQuestionsParams struct {
	ctx   context.Context
	setID int64
}

// SetFormRepositoryMockGetWithQuestionsParamPtrs contains pointers to parameters of the SetFormRepository.GetWithQuestions
type SetFormRepositoryMockGetWithQuestionsParamPtrs struct {
	ctx   *context.Context
	setID *int64
}

// SetFormRepositoryMockGetWithQuestionsResults contains results of the SetFormRepository.GetWithQuestions
type SetFormRepositoryMockGetWithQuestionsResults struct {
	sp1 *model.SetForm
	err error
}

// SetFormRepositoryMockGetWithQuestionsOrigins contains origins of expectations of the SetFormRepository.GetWithQuestions
type SetFormRepositoryMockGetWithQuestionsExpectationOrigins struct {
	origin      string
	originCtx   string
	originSetID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Optional() *mSetFormRepositoryMockGetWithQuestions {
	mmGetWithQuestions.optional = true
	return mmGetWithQuestions
}

// Expect sets up expected params for SetFormRepository.GetWithQuestions
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Expect(ctx context.Context, setID int64) *mSetFormRepositoryMockGetWithQuestions {
	if mmGetWithQuestions.mock.funcGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Set")
	}

	if mmGetWithQuestions.defaultExpectation == nil {
		mmGetWithQuestions.defaultExpectation = &SetFormRepositoryMockGetWithQuestionsExpectation{}
	}

	if mmGetWithQuestions.defaultExpectation.paramPtrs != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by ExpectParams functions")
	}

	mmGetWithQuestions.defaultExpectation.params = &SetFormRepositoryMockGetWithQuestionsParams{ctx, setID}
	mmGetWithQuestions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetWithQuestions.expectations {
		if minimock.Equal(e.params, mmGetWithQuestions.defaultExpectation.params) {
			mmGetWithQuestions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWithQuestions.defaultExpectation.params)
		}
	}

	return mmGetWithQuestions
}

// ExpectCtxParam1 sets up expected param ctx for SetFormRepository.GetWithQuestions
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) ExpectCtxParam1(ctx context.Context) *mSetFormRepositoryMockGetWithQuestions {
	if mmGetWithQuestions.mock.funcGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Set")
	}

	if mmGetWithQuestions.defaultExpectation == nil {
		mmGetWithQuestions.defaultExpectation = &SetFormRepositoryMockGetWithQuestionsExpectation{}
	}

	if mmGetWithQuestions.defaultExpectation.params != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Expect")
	}

	if mmGetWithQuestions.defaultExpectation.paramPtrs == nil {
		mmGetWithQuestions.defaultExpectation.paramPtrs = &SetFormRepositoryMockGetWithQuestionsParamPtrs{}
	}
	mmGetWithQuestions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetWithQuestions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetWithQuestions
}

// ExpectSetIDParam2 sets up expected param setID for SetFormRepository.GetWithQuestions
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) ExpectSetIDParam2(setID int64) *mSetFormRepositoryMockGetWithQuestions {
	if mmGetWithQuestions.mock.funcGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Set")
	}

	if mmGetWithQuestions.defaultExpectation == nil {
		mmGetWithQuestions.defaultExpectation = &SetFormRepositoryMockGetWithQuestionsExpectation{}
	}

	if mmGetWithQuestions.defaultExpectation.params != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Expect")
	}

	if mmGetWithQuestions.defaultExpectation.paramPtrs == nil {
		mmGetWithQuestions.defaultExpectation.paramPtrs = &SetFormRepositoryMockGetWithQuestionsParamPtrs{}
	}
	mmGetWithQuestions.defaultExpectation.paramPtrs.setID = &setID
	mmGetWithQuestions.defaultExpectation.expectationOrigins.originSetID = minimock.CallerInfo(1)

	return mmGetWithQuestions
}

// Inspect accepts an inspector function that has same arguments as the SetFormRepository.GetWithQuestions
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Inspect(f func(ctx context.Context, setID int64)) *mSetFormRepositoryMockGetWithQuestions {
	if mmGetWithQuestions.mock.inspectFuncGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("Inspect function is already set for SetFormRepositoryMock.GetWithQuestions")
	}

	mmGetWithQuestions.mock.inspectFuncGetWithQuestions = f

	return mmGetWithQuestions
}

// Return sets up results that will be returned by SetFormRepository.GetWithQuestions
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Return(sp1 *model.SetForm, err error) *SetFormRepositoryMock {
	if mmGetWithQuestions.mock.funcGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Set")
	}

	if mmGetWithQuestions.defaultExpectation == nil {
		mmGetWithQuestions.defaultExpectation = &SetFormRepositoryMockGetWithQuestionsExpectation{mock: mmGetWithQuestions.mock}
	}
	mmGetWithQuestions.defaultExpectation.results = &SetFormRepositoryMockGetWithQuestionsResults{sp1, err}
	mmGetWithQuestions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetWithQuestions.mock
}

// Set uses given function f to mock the SetFormRepository.GetWithQuestions method
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Set(f func(ctx context.Context, setID int64) (sp1 *model.SetForm, err error)) *SetFormRepositoryMock {
	if mmGetWithQuestions.defaultExpectation != nil {
		mmGetWithQuestions.mock.t.Fatalf("Default expectation is already set for the SetFormRepository.GetWithQuestions method")
	}

	if len(mmGetWithQuestions.expectations) > 0 {
		mmGetWithQuestions.mock.t.Fatalf("Some expectations are already set for the SetFormRepository.GetWithQuestions method")
	}

	mmGetWithQuestions.mock.funcGetWithQuestions = f
	mmGetWithQuestions.mock.funcGetWithQuestionsOrigin = minimock.CallerInfo(1)
	return mmGetWithQuestions.mock
}

// When sets expectation for the SetFormRepository.GetWithQuestions which will trigger the result defined by the following
// Then helper
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) When(ctx context.Context, setID int64) *SetFormRepositoryMockGetWithQuestionsExpectation {
	if mmGetWithQuestions.mock.funcGetWithQuestions != nil {
		mmGetWithQuestions.mock.t.Fatalf("SetFormRepositoryMock.GetWithQuestions mock is already set by Set")
	}

	expectation := &SetFormRepositoryMockGetWithQuestionsExpectation{
		mock:               mmGetWithQuestions.mock,
		params:             &SetFormRepositoryMockGetWithQuestionsParams{ctx, setID},
		expectationOrigins: SetFormRepositoryMockGetWithQuestionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetWithQuestions.expectations = append(mmGetWithQuestions.expectations, expectation)
	return expectation
}

// Then sets up SetFormRepository.GetWithQuestions return parameters for the expectation previously defined by the When method
func (e *SetFormRepositoryMockGetWithQuestionsExpectation) Then(sp1 *model.SetForm, err error) *SetFormRepositoryMock {
	e.results = &SetFormRepositoryMockGetWithQuestionsResults{sp1, err}
	return e.mock
}

// Times sets number of times SetFormRepository.GetWithQuestions should be invoked
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Times(n uint64) *mSetFormRepositoryMockGetWithQuestions {
	if n == 0 {
		mmGetWithQuestions.mock.t.Fatalf("Times of SetFormRepositoryMock.GetWithQuestions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetWithQuestions.expectedInvocations, n)
	mmGetWithQuestions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetWithQuestions
}

func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) invocationsDone() bool {
	if len(mmGetWithQuestions.expectations) == 0 && mmGetWithQuestions.defaultExpectation == nil && mmGetWithQuestions.mock.funcGetWithQuestions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetWithQuestions.mock.afterGetWithQuestionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetWithQuestions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetWithQuestions implements mm_repository.SetFormRepository
func (mmGetWithQuestions *SetFormRepositoryMock) GetWithQuestions(ctx context.Context, setID int64) (sp1 *model.SetForm, err error) {
	mm_atomic.AddUint64(&mmGetWithQuestions.beforeGetWithQuestionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWithQuestions.afterGetWithQuestionsCounter, 1)

	mmGetWithQuestions.t.Helper()

	if mmGetWithQuestions.inspectFuncGetWithQuestions != nil {
		mmGetWithQuestions.inspectFuncGetWithQuestions(ctx, setID)
	}

	mm_params := SetFormRepositoryMockGetWithQuestionsParams{ctx, setID}

	// Record call args
	mmGetWithQuestions.GetWithQuestionsMock.mutex.Lock()
	mmGetWithQuestions.GetWithQuestionsMock.callArgs = append(mmGetWithQuestions.GetWithQuestionsMock.callArgs, &mm_params)
	mmGetWithQuestions.GetWithQuestionsMock.mutex.Unlock()

	for _, e := range mmGetWithQuestions.GetWithQuestionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.paramPtrs

		mm_got := SetFormRepositoryMockGetWithQuestionsParams{ctx, setID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetWithQuestions.t.Errorf("SetFormRepositoryMock.GetWithQuestions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.setID != nil && !minimock.Equal(*mm_want_ptrs.setID, mm_got.setID) {
				mmGetWithQuestions.t.Errorf("SetFormRepositoryMock.GetWithQuestions got unexpected parameter setID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.expectationOrigins.originSetID, *mm_want_ptrs.setID, mm_got.setID, minimock.Diff(*mm_want_ptrs.setID, mm_got.setID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetWithQuestions.t.Errorf("SetFormRepositoryMock.GetWithQuestions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetWithQuestions.GetWithQuestionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetWithQuestions.t.Fatal("No results are set for the SetFormRepositoryMock.GetWithQuestions")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetWithQuestions.funcGetWithQuestions != nil {
		return mmGetWithQuestions.funcGetWithQuestions(ctx, setID)
	}
	mmGetWithQuestions.t.Fatalf("Unexpected call to SetFormRepositoryMock.GetWithQuestions. %v %v", ctx, setID)
	return
}

// GetWithQuestionsAfterCounter returns a count of finished SetFormRepositoryMock.GetWithQuestions invocations
func (mmGetWithQuestions *SetFormRepositoryMock) GetWithQuestionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithQuestions.afterGetWithQuestionsCounter)
}

// GetWithQuestionsBeforeCounter returns a count of SetFormRepositoryMock.GetWithQuestions invocations
func (mmGetWithQuestions *SetFormRepositoryMock) GetWithQuestionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithQuestions.beforeGetWithQuestionsCounter)
}

// Calls returns a list of arguments used in each call to SetFormRepositoryMock.GetWithQuestions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWithQuestions *mSetFormRepositoryMockGetWithQuestions) Calls() []*SetFormRepositoryMockGetWithQuestionsParams {
	mmGetWithQuestions.mutex.RLock()

	argCopy := make([]*SetFormRepositoryMockGetWithQuestionsParams, len(mmGetWithQuestions.callArgs))
	copy(argCopy, mmGetWithQuestions.callArgs)

	mmGetWithQuestions.mutex.RUnlock()

	return argCopy
}

// MinimockGetWithQuestionsDone returns true if the count of the GetWithQuestions invocations corresponds
// the number of defined expectations
func (m *SetFormRepositoryMock) MinimockGetWithQuestionsDone() bool {
	if m.GetWithQuestionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetWithQuestionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetWithQuestionsMock.invocationsDone()
}

// MinimockGetWithQuestionsInspect logs each unmet expectation
func (m *SetFormRepositoryMock) MinimockGetWithQuestionsInspect() {
	for _, e := range m.GetWithQuestionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SetFormRepositoryMock.GetWithQuestions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetWithQuestionsCounter := mm_atomic.LoadUint64(&m.afterGetWithQuestionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetWithQuestionsMock.defaultExpectation != nil && afterGetWithQuestionsCounter < 1 {
		if m.GetWithQuestionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to SetFormRepositoryMock.GetWithQuestions at\n%s", m.GetWithQuestionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to SetFormRepositoryMock.GetWithQuestions at\n%s with params: %#v", m.GetWithQuestionsMock.defaultExpectation.expectationOrigins.origin, *m.GetWithQuestionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWithQuestions != nil && afterGetWithQuestionsCounter < 1 {
		m.t.Errorf("Expected call to SetFormRepositoryMock.GetWithQuestions at\n%s", m.funcGetWithQuestionsOrigin)
	}

	if !m.GetWithQuestionsMock.invocationsDone() && afterGetWithQuestionsCounter > 0 {
		m.t.Errorf("Expected %d calls to SetFormRepositoryMock.GetWithQuestions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetWithQuestionsMock.expectedInvocations), m.GetWithQuestionsMock.expectedInvocationsOrigin, afterGetWithQuestionsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SetFormRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetWithQuestionsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SetFormRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SetFormRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetWithQuestionsDone()
}
