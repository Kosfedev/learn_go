// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Kosfedev/learn_go/internal/repository.QuestionFormRepository -o question_form_repository_minimock.go -n QuestionFormRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Kosfedev/learn_go/internal/model"
	"github.com/gojuno/minimock/v3"
)

// QuestionFormRepositoryMock implements mm_repository.QuestionFormRepository
type QuestionFormRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetWithOptions          func(ctx context.Context, questionID int64) (qp1 *model.QuestionWithOptions, err error)
	funcGetWithOptionsOrigin    string
	inspectFuncGetWithOptions   func(ctx context.Context, questionID int64)
	afterGetWithOptionsCounter  uint64
	beforeGetWithOptionsCounter uint64
	GetWithOptionsMock          mQuestionFormRepositoryMockGetWithOptions

	funcGetWithOptionsSetsSubcategories          func(ctx context.Context, questionID int64) (qp1 *model.QuestionForm, err error)
	funcGetWithOptionsSetsSubcategoriesOrigin    string
	inspectFuncGetWithOptionsSetsSubcategories   func(ctx context.Context, questionID int64)
	afterGetWithOptionsSetsSubcategoriesCounter  uint64
	beforeGetWithOptionsSetsSubcategoriesCounter uint64
	GetWithOptionsSetsSubcategoriesMock          mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories
}

// NewQuestionFormRepositoryMock returns a mock for mm_repository.QuestionFormRepository
func NewQuestionFormRepositoryMock(t minimock.Tester) *QuestionFormRepositoryMock {
	m := &QuestionFormRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetWithOptionsMock = mQuestionFormRepositoryMockGetWithOptions{mock: m}
	m.GetWithOptionsMock.callArgs = []*QuestionFormRepositoryMockGetWithOptionsParams{}

	m.GetWithOptionsSetsSubcategoriesMock = mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories{mock: m}
	m.GetWithOptionsSetsSubcategoriesMock.callArgs = []*QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mQuestionFormRepositoryMockGetWithOptions struct {
	optional           bool
	mock               *QuestionFormRepositoryMock
	defaultExpectation *QuestionFormRepositoryMockGetWithOptionsExpectation
	expectations       []*QuestionFormRepositoryMockGetWithOptionsExpectation

	callArgs []*QuestionFormRepositoryMockGetWithOptionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// QuestionFormRepositoryMockGetWithOptionsExpectation specifies expectation struct of the QuestionFormRepository.GetWithOptions
type QuestionFormRepositoryMockGetWithOptionsExpectation struct {
	mock               *QuestionFormRepositoryMock
	params             *QuestionFormRepositoryMockGetWithOptionsParams
	paramPtrs          *QuestionFormRepositoryMockGetWithOptionsParamPtrs
	expectationOrigins QuestionFormRepositoryMockGetWithOptionsExpectationOrigins
	results            *QuestionFormRepositoryMockGetWithOptionsResults
	returnOrigin       string
	Counter            uint64
}

// QuestionFormRepositoryMockGetWithOptionsParams contains parameters of the QuestionFormRepository.GetWithOptions
type QuestionFormRepositoryMockGetWithOptionsParams struct {
	ctx        context.Context
	questionID int64
}

// QuestionFormRepositoryMockGetWithOptionsParamPtrs contains pointers to parameters of the QuestionFormRepository.GetWithOptions
type QuestionFormRepositoryMockGetWithOptionsParamPtrs struct {
	ctx        *context.Context
	questionID *int64
}

// QuestionFormRepositoryMockGetWithOptionsResults contains results of the QuestionFormRepository.GetWithOptions
type QuestionFormRepositoryMockGetWithOptionsResults struct {
	qp1 *model.QuestionWithOptions
	err error
}

// QuestionFormRepositoryMockGetWithOptionsOrigins contains origins of expectations of the QuestionFormRepository.GetWithOptions
type QuestionFormRepositoryMockGetWithOptionsExpectationOrigins struct {
	origin           string
	originCtx        string
	originQuestionID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Optional() *mQuestionFormRepositoryMockGetWithOptions {
	mmGetWithOptions.optional = true
	return mmGetWithOptions
}

// Expect sets up expected params for QuestionFormRepository.GetWithOptions
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Expect(ctx context.Context, questionID int64) *mQuestionFormRepositoryMockGetWithOptions {
	if mmGetWithOptions.mock.funcGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Set")
	}

	if mmGetWithOptions.defaultExpectation == nil {
		mmGetWithOptions.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsExpectation{}
	}

	if mmGetWithOptions.defaultExpectation.paramPtrs != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by ExpectParams functions")
	}

	mmGetWithOptions.defaultExpectation.params = &QuestionFormRepositoryMockGetWithOptionsParams{ctx, questionID}
	mmGetWithOptions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetWithOptions.expectations {
		if minimock.Equal(e.params, mmGetWithOptions.defaultExpectation.params) {
			mmGetWithOptions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWithOptions.defaultExpectation.params)
		}
	}

	return mmGetWithOptions
}

// ExpectCtxParam1 sets up expected param ctx for QuestionFormRepository.GetWithOptions
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) ExpectCtxParam1(ctx context.Context) *mQuestionFormRepositoryMockGetWithOptions {
	if mmGetWithOptions.mock.funcGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Set")
	}

	if mmGetWithOptions.defaultExpectation == nil {
		mmGetWithOptions.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsExpectation{}
	}

	if mmGetWithOptions.defaultExpectation.params != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Expect")
	}

	if mmGetWithOptions.defaultExpectation.paramPtrs == nil {
		mmGetWithOptions.defaultExpectation.paramPtrs = &QuestionFormRepositoryMockGetWithOptionsParamPtrs{}
	}
	mmGetWithOptions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetWithOptions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetWithOptions
}

// ExpectQuestionIDParam2 sets up expected param questionID for QuestionFormRepository.GetWithOptions
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) ExpectQuestionIDParam2(questionID int64) *mQuestionFormRepositoryMockGetWithOptions {
	if mmGetWithOptions.mock.funcGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Set")
	}

	if mmGetWithOptions.defaultExpectation == nil {
		mmGetWithOptions.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsExpectation{}
	}

	if mmGetWithOptions.defaultExpectation.params != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Expect")
	}

	if mmGetWithOptions.defaultExpectation.paramPtrs == nil {
		mmGetWithOptions.defaultExpectation.paramPtrs = &QuestionFormRepositoryMockGetWithOptionsParamPtrs{}
	}
	mmGetWithOptions.defaultExpectation.paramPtrs.questionID = &questionID
	mmGetWithOptions.defaultExpectation.expectationOrigins.originQuestionID = minimock.CallerInfo(1)

	return mmGetWithOptions
}

// Inspect accepts an inspector function that has same arguments as the QuestionFormRepository.GetWithOptions
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Inspect(f func(ctx context.Context, questionID int64)) *mQuestionFormRepositoryMockGetWithOptions {
	if mmGetWithOptions.mock.inspectFuncGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("Inspect function is already set for QuestionFormRepositoryMock.GetWithOptions")
	}

	mmGetWithOptions.mock.inspectFuncGetWithOptions = f

	return mmGetWithOptions
}

// Return sets up results that will be returned by QuestionFormRepository.GetWithOptions
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Return(qp1 *model.QuestionWithOptions, err error) *QuestionFormRepositoryMock {
	if mmGetWithOptions.mock.funcGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Set")
	}

	if mmGetWithOptions.defaultExpectation == nil {
		mmGetWithOptions.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsExpectation{mock: mmGetWithOptions.mock}
	}
	mmGetWithOptions.defaultExpectation.results = &QuestionFormRepositoryMockGetWithOptionsResults{qp1, err}
	mmGetWithOptions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetWithOptions.mock
}

// Set uses given function f to mock the QuestionFormRepository.GetWithOptions method
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Set(f func(ctx context.Context, questionID int64) (qp1 *model.QuestionWithOptions, err error)) *QuestionFormRepositoryMock {
	if mmGetWithOptions.defaultExpectation != nil {
		mmGetWithOptions.mock.t.Fatalf("Default expectation is already set for the QuestionFormRepository.GetWithOptions method")
	}

	if len(mmGetWithOptions.expectations) > 0 {
		mmGetWithOptions.mock.t.Fatalf("Some expectations are already set for the QuestionFormRepository.GetWithOptions method")
	}

	mmGetWithOptions.mock.funcGetWithOptions = f
	mmGetWithOptions.mock.funcGetWithOptionsOrigin = minimock.CallerInfo(1)
	return mmGetWithOptions.mock
}

// When sets expectation for the QuestionFormRepository.GetWithOptions which will trigger the result defined by the following
// Then helper
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) When(ctx context.Context, questionID int64) *QuestionFormRepositoryMockGetWithOptionsExpectation {
	if mmGetWithOptions.mock.funcGetWithOptions != nil {
		mmGetWithOptions.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptions mock is already set by Set")
	}

	expectation := &QuestionFormRepositoryMockGetWithOptionsExpectation{
		mock:               mmGetWithOptions.mock,
		params:             &QuestionFormRepositoryMockGetWithOptionsParams{ctx, questionID},
		expectationOrigins: QuestionFormRepositoryMockGetWithOptionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetWithOptions.expectations = append(mmGetWithOptions.expectations, expectation)
	return expectation
}

// Then sets up QuestionFormRepository.GetWithOptions return parameters for the expectation previously defined by the When method
func (e *QuestionFormRepositoryMockGetWithOptionsExpectation) Then(qp1 *model.QuestionWithOptions, err error) *QuestionFormRepositoryMock {
	e.results = &QuestionFormRepositoryMockGetWithOptionsResults{qp1, err}
	return e.mock
}

// Times sets number of times QuestionFormRepository.GetWithOptions should be invoked
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Times(n uint64) *mQuestionFormRepositoryMockGetWithOptions {
	if n == 0 {
		mmGetWithOptions.mock.t.Fatalf("Times of QuestionFormRepositoryMock.GetWithOptions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetWithOptions.expectedInvocations, n)
	mmGetWithOptions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetWithOptions
}

func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) invocationsDone() bool {
	if len(mmGetWithOptions.expectations) == 0 && mmGetWithOptions.defaultExpectation == nil && mmGetWithOptions.mock.funcGetWithOptions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetWithOptions.mock.afterGetWithOptionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetWithOptions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetWithOptions implements mm_repository.QuestionFormRepository
func (mmGetWithOptions *QuestionFormRepositoryMock) GetWithOptions(ctx context.Context, questionID int64) (qp1 *model.QuestionWithOptions, err error) {
	mm_atomic.AddUint64(&mmGetWithOptions.beforeGetWithOptionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWithOptions.afterGetWithOptionsCounter, 1)

	mmGetWithOptions.t.Helper()

	if mmGetWithOptions.inspectFuncGetWithOptions != nil {
		mmGetWithOptions.inspectFuncGetWithOptions(ctx, questionID)
	}

	mm_params := QuestionFormRepositoryMockGetWithOptionsParams{ctx, questionID}

	// Record call args
	mmGetWithOptions.GetWithOptionsMock.mutex.Lock()
	mmGetWithOptions.GetWithOptionsMock.callArgs = append(mmGetWithOptions.GetWithOptionsMock.callArgs, &mm_params)
	mmGetWithOptions.GetWithOptionsMock.mutex.Unlock()

	for _, e := range mmGetWithOptions.GetWithOptionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.qp1, e.results.err
		}
	}

	if mmGetWithOptions.GetWithOptionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWithOptions.GetWithOptionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetWithOptions.GetWithOptionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetWithOptions.GetWithOptionsMock.defaultExpectation.paramPtrs

		mm_got := QuestionFormRepositoryMockGetWithOptionsParams{ctx, questionID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetWithOptions.t.Errorf("QuestionFormRepositoryMock.GetWithOptions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithOptions.GetWithOptionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.questionID != nil && !minimock.Equal(*mm_want_ptrs.questionID, mm_got.questionID) {
				mmGetWithOptions.t.Errorf("QuestionFormRepositoryMock.GetWithOptions got unexpected parameter questionID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithOptions.GetWithOptionsMock.defaultExpectation.expectationOrigins.originQuestionID, *mm_want_ptrs.questionID, mm_got.questionID, minimock.Diff(*mm_want_ptrs.questionID, mm_got.questionID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetWithOptions.t.Errorf("QuestionFormRepositoryMock.GetWithOptions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetWithOptions.GetWithOptionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetWithOptions.GetWithOptionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetWithOptions.t.Fatal("No results are set for the QuestionFormRepositoryMock.GetWithOptions")
		}
		return (*mm_results).qp1, (*mm_results).err
	}
	if mmGetWithOptions.funcGetWithOptions != nil {
		return mmGetWithOptions.funcGetWithOptions(ctx, questionID)
	}
	mmGetWithOptions.t.Fatalf("Unexpected call to QuestionFormRepositoryMock.GetWithOptions. %v %v", ctx, questionID)
	return
}

// GetWithOptionsAfterCounter returns a count of finished QuestionFormRepositoryMock.GetWithOptions invocations
func (mmGetWithOptions *QuestionFormRepositoryMock) GetWithOptionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithOptions.afterGetWithOptionsCounter)
}

// GetWithOptionsBeforeCounter returns a count of QuestionFormRepositoryMock.GetWithOptions invocations
func (mmGetWithOptions *QuestionFormRepositoryMock) GetWithOptionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithOptions.beforeGetWithOptionsCounter)
}

// Calls returns a list of arguments used in each call to QuestionFormRepositoryMock.GetWithOptions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWithOptions *mQuestionFormRepositoryMockGetWithOptions) Calls() []*QuestionFormRepositoryMockGetWithOptionsParams {
	mmGetWithOptions.mutex.RLock()

	argCopy := make([]*QuestionFormRepositoryMockGetWithOptionsParams, len(mmGetWithOptions.callArgs))
	copy(argCopy, mmGetWithOptions.callArgs)

	mmGetWithOptions.mutex.RUnlock()

	return argCopy
}

// MinimockGetWithOptionsDone returns true if the count of the GetWithOptions invocations corresponds
// the number of defined expectations
func (m *QuestionFormRepositoryMock) MinimockGetWithOptionsDone() bool {
	if m.GetWithOptionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetWithOptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetWithOptionsMock.invocationsDone()
}

// MinimockGetWithOptionsInspect logs each unmet expectation
func (m *QuestionFormRepositoryMock) MinimockGetWithOptionsInspect() {
	for _, e := range m.GetWithOptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetWithOptionsCounter := mm_atomic.LoadUint64(&m.afterGetWithOptionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetWithOptionsMock.defaultExpectation != nil && afterGetWithOptionsCounter < 1 {
		if m.GetWithOptionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptions at\n%s", m.GetWithOptionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptions at\n%s with params: %#v", m.GetWithOptionsMock.defaultExpectation.expectationOrigins.origin, *m.GetWithOptionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWithOptions != nil && afterGetWithOptionsCounter < 1 {
		m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptions at\n%s", m.funcGetWithOptionsOrigin)
	}

	if !m.GetWithOptionsMock.invocationsDone() && afterGetWithOptionsCounter > 0 {
		m.t.Errorf("Expected %d calls to QuestionFormRepositoryMock.GetWithOptions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetWithOptionsMock.expectedInvocations), m.GetWithOptionsMock.expectedInvocationsOrigin, afterGetWithOptionsCounter)
	}
}

type mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories struct {
	optional           bool
	mock               *QuestionFormRepositoryMock
	defaultExpectation *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation
	expectations       []*QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation

	callArgs []*QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation specifies expectation struct of the QuestionFormRepository.GetWithOptionsSetsSubcategories
type QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation struct {
	mock               *QuestionFormRepositoryMock
	params             *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams
	paramPtrs          *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParamPtrs
	expectationOrigins QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectationOrigins
	results            *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesResults
	returnOrigin       string
	Counter            uint64
}

// QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams contains parameters of the QuestionFormRepository.GetWithOptionsSetsSubcategories
type QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams struct {
	ctx        context.Context
	questionID int64
}

// QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParamPtrs contains pointers to parameters of the QuestionFormRepository.GetWithOptionsSetsSubcategories
type QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParamPtrs struct {
	ctx        *context.Context
	questionID *int64
}

// QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesResults contains results of the QuestionFormRepository.GetWithOptionsSetsSubcategories
type QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesResults struct {
	qp1 *model.QuestionForm
	err error
}

// QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesOrigins contains origins of expectations of the QuestionFormRepository.GetWithOptionsSetsSubcategories
type QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectationOrigins struct {
	origin           string
	originCtx        string
	originQuestionID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Optional() *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	mmGetWithOptionsSetsSubcategories.optional = true
	return mmGetWithOptionsSetsSubcategories
}

// Expect sets up expected params for QuestionFormRepository.GetWithOptionsSetsSubcategories
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Expect(ctx context.Context, questionID int64) *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	if mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Set")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation{}
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by ExpectParams functions")
	}

	mmGetWithOptionsSetsSubcategories.defaultExpectation.params = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams{ctx, questionID}
	mmGetWithOptionsSetsSubcategories.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetWithOptionsSetsSubcategories.expectations {
		if minimock.Equal(e.params, mmGetWithOptionsSetsSubcategories.defaultExpectation.params) {
			mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWithOptionsSetsSubcategories.defaultExpectation.params)
		}
	}

	return mmGetWithOptionsSetsSubcategories
}

// ExpectCtxParam1 sets up expected param ctx for QuestionFormRepository.GetWithOptionsSetsSubcategories
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) ExpectCtxParam1(ctx context.Context) *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	if mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Set")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation{}
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation.params != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Expect")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParamPtrs{}
	}
	mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetWithOptionsSetsSubcategories.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetWithOptionsSetsSubcategories
}

// ExpectQuestionIDParam2 sets up expected param questionID for QuestionFormRepository.GetWithOptionsSetsSubcategories
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) ExpectQuestionIDParam2(questionID int64) *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	if mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Set")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation{}
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation.params != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Expect")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParamPtrs{}
	}
	mmGetWithOptionsSetsSubcategories.defaultExpectation.paramPtrs.questionID = &questionID
	mmGetWithOptionsSetsSubcategories.defaultExpectation.expectationOrigins.originQuestionID = minimock.CallerInfo(1)

	return mmGetWithOptionsSetsSubcategories
}

// Inspect accepts an inspector function that has same arguments as the QuestionFormRepository.GetWithOptionsSetsSubcategories
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Inspect(f func(ctx context.Context, questionID int64)) *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	if mmGetWithOptionsSetsSubcategories.mock.inspectFuncGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("Inspect function is already set for QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories")
	}

	mmGetWithOptionsSetsSubcategories.mock.inspectFuncGetWithOptionsSetsSubcategories = f

	return mmGetWithOptionsSetsSubcategories
}

// Return sets up results that will be returned by QuestionFormRepository.GetWithOptionsSetsSubcategories
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Return(qp1 *model.QuestionForm, err error) *QuestionFormRepositoryMock {
	if mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Set")
	}

	if mmGetWithOptionsSetsSubcategories.defaultExpectation == nil {
		mmGetWithOptionsSetsSubcategories.defaultExpectation = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation{mock: mmGetWithOptionsSetsSubcategories.mock}
	}
	mmGetWithOptionsSetsSubcategories.defaultExpectation.results = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesResults{qp1, err}
	mmGetWithOptionsSetsSubcategories.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetWithOptionsSetsSubcategories.mock
}

// Set uses given function f to mock the QuestionFormRepository.GetWithOptionsSetsSubcategories method
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Set(f func(ctx context.Context, questionID int64) (qp1 *model.QuestionForm, err error)) *QuestionFormRepositoryMock {
	if mmGetWithOptionsSetsSubcategories.defaultExpectation != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("Default expectation is already set for the QuestionFormRepository.GetWithOptionsSetsSubcategories method")
	}

	if len(mmGetWithOptionsSetsSubcategories.expectations) > 0 {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("Some expectations are already set for the QuestionFormRepository.GetWithOptionsSetsSubcategories method")
	}

	mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories = f
	mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategoriesOrigin = minimock.CallerInfo(1)
	return mmGetWithOptionsSetsSubcategories.mock
}

// When sets expectation for the QuestionFormRepository.GetWithOptionsSetsSubcategories which will trigger the result defined by the following
// Then helper
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) When(ctx context.Context, questionID int64) *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation {
	if mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock is already set by Set")
	}

	expectation := &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation{
		mock:               mmGetWithOptionsSetsSubcategories.mock,
		params:             &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams{ctx, questionID},
		expectationOrigins: QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetWithOptionsSetsSubcategories.expectations = append(mmGetWithOptionsSetsSubcategories.expectations, expectation)
	return expectation
}

// Then sets up QuestionFormRepository.GetWithOptionsSetsSubcategories return parameters for the expectation previously defined by the When method
func (e *QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesExpectation) Then(qp1 *model.QuestionForm, err error) *QuestionFormRepositoryMock {
	e.results = &QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesResults{qp1, err}
	return e.mock
}

// Times sets number of times QuestionFormRepository.GetWithOptionsSetsSubcategories should be invoked
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Times(n uint64) *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories {
	if n == 0 {
		mmGetWithOptionsSetsSubcategories.mock.t.Fatalf("Times of QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetWithOptionsSetsSubcategories.expectedInvocations, n)
	mmGetWithOptionsSetsSubcategories.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetWithOptionsSetsSubcategories
}

func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) invocationsDone() bool {
	if len(mmGetWithOptionsSetsSubcategories.expectations) == 0 && mmGetWithOptionsSetsSubcategories.defaultExpectation == nil && mmGetWithOptionsSetsSubcategories.mock.funcGetWithOptionsSetsSubcategories == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetWithOptionsSetsSubcategories.mock.afterGetWithOptionsSetsSubcategoriesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetWithOptionsSetsSubcategories.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetWithOptionsSetsSubcategories implements mm_repository.QuestionFormRepository
func (mmGetWithOptionsSetsSubcategories *QuestionFormRepositoryMock) GetWithOptionsSetsSubcategories(ctx context.Context, questionID int64) (qp1 *model.QuestionForm, err error) {
	mm_atomic.AddUint64(&mmGetWithOptionsSetsSubcategories.beforeGetWithOptionsSetsSubcategoriesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWithOptionsSetsSubcategories.afterGetWithOptionsSetsSubcategoriesCounter, 1)

	mmGetWithOptionsSetsSubcategories.t.Helper()

	if mmGetWithOptionsSetsSubcategories.inspectFuncGetWithOptionsSetsSubcategories != nil {
		mmGetWithOptionsSetsSubcategories.inspectFuncGetWithOptionsSetsSubcategories(ctx, questionID)
	}

	mm_params := QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams{ctx, questionID}

	// Record call args
	mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.mutex.Lock()
	mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.callArgs = append(mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.callArgs, &mm_params)
	mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.mutex.Unlock()

	for _, e := range mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.qp1, e.results.err
		}
	}

	if mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.params
		mm_want_ptrs := mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.paramPtrs

		mm_got := QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams{ctx, questionID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetWithOptionsSetsSubcategories.t.Errorf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.questionID != nil && !minimock.Equal(*mm_want_ptrs.questionID, mm_got.questionID) {
				mmGetWithOptionsSetsSubcategories.t.Errorf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories got unexpected parameter questionID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.expectationOrigins.originQuestionID, *mm_want_ptrs.questionID, mm_got.questionID, minimock.Diff(*mm_want_ptrs.questionID, mm_got.questionID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetWithOptionsSetsSubcategories.t.Errorf("QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetWithOptionsSetsSubcategories.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetWithOptionsSetsSubcategories.t.Fatal("No results are set for the QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories")
		}
		return (*mm_results).qp1, (*mm_results).err
	}
	if mmGetWithOptionsSetsSubcategories.funcGetWithOptionsSetsSubcategories != nil {
		return mmGetWithOptionsSetsSubcategories.funcGetWithOptionsSetsSubcategories(ctx, questionID)
	}
	mmGetWithOptionsSetsSubcategories.t.Fatalf("Unexpected call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories. %v %v", ctx, questionID)
	return
}

// GetWithOptionsSetsSubcategoriesAfterCounter returns a count of finished QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories invocations
func (mmGetWithOptionsSetsSubcategories *QuestionFormRepositoryMock) GetWithOptionsSetsSubcategoriesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithOptionsSetsSubcategories.afterGetWithOptionsSetsSubcategoriesCounter)
}

// GetWithOptionsSetsSubcategoriesBeforeCounter returns a count of QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories invocations
func (mmGetWithOptionsSetsSubcategories *QuestionFormRepositoryMock) GetWithOptionsSetsSubcategoriesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWithOptionsSetsSubcategories.beforeGetWithOptionsSetsSubcategoriesCounter)
}

// Calls returns a list of arguments used in each call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWithOptionsSetsSubcategories *mQuestionFormRepositoryMockGetWithOptionsSetsSubcategories) Calls() []*QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams {
	mmGetWithOptionsSetsSubcategories.mutex.RLock()

	argCopy := make([]*QuestionFormRepositoryMockGetWithOptionsSetsSubcategoriesParams, len(mmGetWithOptionsSetsSubcategories.callArgs))
	copy(argCopy, mmGetWithOptionsSetsSubcategories.callArgs)

	mmGetWithOptionsSetsSubcategories.mutex.RUnlock()

	return argCopy
}

// MinimockGetWithOptionsSetsSubcategoriesDone returns true if the count of the GetWithOptionsSetsSubcategories invocations corresponds
// the number of defined expectations
func (m *QuestionFormRepositoryMock) MinimockGetWithOptionsSetsSubcategoriesDone() bool {
	if m.GetWithOptionsSetsSubcategoriesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetWithOptionsSetsSubcategoriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetWithOptionsSetsSubcategoriesMock.invocationsDone()
}

// MinimockGetWithOptionsSetsSubcategoriesInspect logs each unmet expectation
func (m *QuestionFormRepositoryMock) MinimockGetWithOptionsSetsSubcategoriesInspect() {
	for _, e := range m.GetWithOptionsSetsSubcategoriesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetWithOptionsSetsSubcategoriesCounter := mm_atomic.LoadUint64(&m.afterGetWithOptionsSetsSubcategoriesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetWithOptionsSetsSubcategoriesMock.defaultExpectation != nil && afterGetWithOptionsSetsSubcategoriesCounter < 1 {
		if m.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories at\n%s", m.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories at\n%s with params: %#v", m.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.expectationOrigins.origin, *m.GetWithOptionsSetsSubcategoriesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWithOptionsSetsSubcategories != nil && afterGetWithOptionsSetsSubcategoriesCounter < 1 {
		m.t.Errorf("Expected call to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories at\n%s", m.funcGetWithOptionsSetsSubcategoriesOrigin)
	}

	if !m.GetWithOptionsSetsSubcategoriesMock.invocationsDone() && afterGetWithOptionsSetsSubcategoriesCounter > 0 {
		m.t.Errorf("Expected %d calls to QuestionFormRepositoryMock.GetWithOptionsSetsSubcategories at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetWithOptionsSetsSubcategoriesMock.expectedInvocations), m.GetWithOptionsSetsSubcategoriesMock.expectedInvocationsOrigin, afterGetWithOptionsSetsSubcategoriesCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QuestionFormRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetWithOptionsInspect()

			m.MinimockGetWithOptionsSetsSubcategoriesInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QuestionFormRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QuestionFormRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetWithOptionsDone() &&
		m.MinimockGetWithOptionsSetsSubcategoriesDone()
}
