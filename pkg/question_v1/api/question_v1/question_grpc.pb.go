// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/question_v1/question.proto

package question_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionV1Client is the client API for QuestionV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionV1Client interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	AddOptions(ctx context.Context, in *AddOptionsRequest, opts ...grpc.CallOption) (*AddOptionsResponse, error)
	DeleteOptions(ctx context.Context, in *DeleteOptionsRequest, opts ...grpc.CallOption) (*DeleteOptionsResponse, error)
	AddSubcategories(ctx context.Context, in *AddSubcategoriesRequest, opts ...grpc.CallOption) (*AddSubcategoriesResponse, error)
	RemoveSubcategories(ctx context.Context, in *RemoveSubcategoriesRequest, opts ...grpc.CallOption) (*RemoveSubcategoriesResponse, error)
}

type questionV1Client struct {
	cc grpc.ClientConnInterface
}

func NewQuestionV1Client(cc grpc.ClientConnInterface) QuestionV1Client {
	return &questionV1Client{cc}
}

func (c *questionV1Client) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) AddOptions(ctx context.Context, in *AddOptionsRequest, opts ...grpc.CallOption) (*AddOptionsResponse, error) {
	out := new(AddOptionsResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/AddOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) DeleteOptions(ctx context.Context, in *DeleteOptionsRequest, opts ...grpc.CallOption) (*DeleteOptionsResponse, error) {
	out := new(DeleteOptionsResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/DeleteOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) AddSubcategories(ctx context.Context, in *AddSubcategoriesRequest, opts ...grpc.CallOption) (*AddSubcategoriesResponse, error) {
	out := new(AddSubcategoriesResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/AddSubcategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionV1Client) RemoveSubcategories(ctx context.Context, in *RemoveSubcategoriesRequest, opts ...grpc.CallOption) (*RemoveSubcategoriesResponse, error) {
	out := new(RemoveSubcategoriesResponse)
	err := c.cc.Invoke(ctx, "/question_v1.QuestionV1/RemoveSubcategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionV1Server is the server API for QuestionV1 service.
// All implementations must embed UnimplementedQuestionV1Server
// for forward compatibility
type QuestionV1Server interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	AddOptions(context.Context, *AddOptionsRequest) (*AddOptionsResponse, error)
	DeleteOptions(context.Context, *DeleteOptionsRequest) (*DeleteOptionsResponse, error)
	AddSubcategories(context.Context, *AddSubcategoriesRequest) (*AddSubcategoriesResponse, error)
	RemoveSubcategories(context.Context, *RemoveSubcategoriesRequest) (*RemoveSubcategoriesResponse, error)
	mustEmbedUnimplementedQuestionV1Server()
}

// UnimplementedQuestionV1Server must be embedded to have forward compatible implementations.
type UnimplementedQuestionV1Server struct {
}

func (UnimplementedQuestionV1Server) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQuestionV1Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuestionV1Server) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuestionV1Server) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQuestionV1Server) AddOptions(context.Context, *AddOptionsRequest) (*AddOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOptions not implemented")
}
func (UnimplementedQuestionV1Server) DeleteOptions(context.Context, *DeleteOptionsRequest) (*DeleteOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOptions not implemented")
}
func (UnimplementedQuestionV1Server) AddSubcategories(context.Context, *AddSubcategoriesRequest) (*AddSubcategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubcategories not implemented")
}
func (UnimplementedQuestionV1Server) RemoveSubcategories(context.Context, *RemoveSubcategoriesRequest) (*RemoveSubcategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubcategories not implemented")
}
func (UnimplementedQuestionV1Server) mustEmbedUnimplementedQuestionV1Server() {}

// UnsafeQuestionV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionV1Server will
// result in compilation errors.
type UnsafeQuestionV1Server interface {
	mustEmbedUnimplementedQuestionV1Server()
}

func RegisterQuestionV1Server(s grpc.ServiceRegistrar, srv QuestionV1Server) {
	s.RegisterService(&QuestionV1_ServiceDesc, srv)
}

func _QuestionV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_AddOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).AddOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/AddOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).AddOptions(ctx, req.(*AddOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_DeleteOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).DeleteOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/DeleteOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).DeleteOptions(ctx, req.(*DeleteOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_AddSubcategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubcategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).AddSubcategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/AddSubcategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).AddSubcategories(ctx, req.(*AddSubcategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionV1_RemoveSubcategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubcategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionV1Server).RemoveSubcategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_v1.QuestionV1/RemoveSubcategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionV1Server).RemoveSubcategories(ctx, req.(*RemoveSubcategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionV1_ServiceDesc is the grpc.ServiceDesc for QuestionV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question_v1.QuestionV1",
	HandlerType: (*QuestionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _QuestionV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _QuestionV1_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QuestionV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _QuestionV1_Delete_Handler,
		},
		{
			MethodName: "AddOptions",
			Handler:    _QuestionV1_AddOptions_Handler,
		},
		{
			MethodName: "DeleteOptions",
			Handler:    _QuestionV1_DeleteOptions_Handler,
		},
		{
			MethodName: "AddSubcategories",
			Handler:    _QuestionV1_AddSubcategories_Handler,
		},
		{
			MethodName: "RemoveSubcategories",
			Handler:    _QuestionV1_RemoveSubcategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/question_v1/question.proto",
}
