// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: question_form.proto

package question_form_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionFormV1Client is the client API for QuestionFormV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionFormV1Client interface {
	GetWithOptionsSetsSubcategories(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error)
	GetWithOptions(ctx context.Context, in *GetWithOptionsRequest, opts ...grpc.CallOption) (*GetWithOptionsResponse, error)
}

type questionFormV1Client struct {
	cc grpc.ClientConnInterface
}

func NewQuestionFormV1Client(cc grpc.ClientConnInterface) QuestionFormV1Client {
	return &questionFormV1Client{cc}
}

func (c *questionFormV1Client) GetWithOptionsSetsSubcategories(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error) {
	out := new(GetFormResponse)
	err := c.cc.Invoke(ctx, "/question_form_v1.QuestionFormV1/GetWithOptionsSetsSubcategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionFormV1Client) GetWithOptions(ctx context.Context, in *GetWithOptionsRequest, opts ...grpc.CallOption) (*GetWithOptionsResponse, error) {
	out := new(GetWithOptionsResponse)
	err := c.cc.Invoke(ctx, "/question_form_v1.QuestionFormV1/GetWithOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionFormV1Server is the server API for QuestionFormV1 service.
// All implementations must embed UnimplementedQuestionFormV1Server
// for forward compatibility
type QuestionFormV1Server interface {
	GetWithOptionsSetsSubcategories(context.Context, *GetFormRequest) (*GetFormResponse, error)
	GetWithOptions(context.Context, *GetWithOptionsRequest) (*GetWithOptionsResponse, error)
	mustEmbedUnimplementedQuestionFormV1Server()
}

// UnimplementedQuestionFormV1Server must be embedded to have forward compatible implementations.
type UnimplementedQuestionFormV1Server struct {
}

func (UnimplementedQuestionFormV1Server) GetWithOptionsSetsSubcategories(context.Context, *GetFormRequest) (*GetFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithOptionsSetsSubcategories not implemented")
}
func (UnimplementedQuestionFormV1Server) GetWithOptions(context.Context, *GetWithOptionsRequest) (*GetWithOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithOptions not implemented")
}
func (UnimplementedQuestionFormV1Server) mustEmbedUnimplementedQuestionFormV1Server() {}

// UnsafeQuestionFormV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionFormV1Server will
// result in compilation errors.
type UnsafeQuestionFormV1Server interface {
	mustEmbedUnimplementedQuestionFormV1Server()
}

func RegisterQuestionFormV1Server(s grpc.ServiceRegistrar, srv QuestionFormV1Server) {
	s.RegisterService(&QuestionFormV1_ServiceDesc, srv)
}

func _QuestionFormV1_GetWithOptionsSetsSubcategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionFormV1Server).GetWithOptionsSetsSubcategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_form_v1.QuestionFormV1/GetWithOptionsSetsSubcategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionFormV1Server).GetWithOptionsSetsSubcategories(ctx, req.(*GetFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionFormV1_GetWithOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionFormV1Server).GetWithOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_form_v1.QuestionFormV1/GetWithOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionFormV1Server).GetWithOptions(ctx, req.(*GetWithOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionFormV1_ServiceDesc is the grpc.ServiceDesc for QuestionFormV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionFormV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question_form_v1.QuestionFormV1",
	HandlerType: (*QuestionFormV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWithOptionsSetsSubcategories",
			Handler:    _QuestionFormV1_GetWithOptionsSetsSubcategories_Handler,
		},
		{
			MethodName: "GetWithOptions",
			Handler:    _QuestionFormV1_GetWithOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question_form.proto",
}
