// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: set_form.proto

package set_form_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetFormV1Client is the client API for SetFormV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetFormV1Client interface {
	GetWithQuestions(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type setFormV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSetFormV1Client(cc grpc.ClientConnInterface) SetFormV1Client {
	return &setFormV1Client{cc}
}

func (c *setFormV1Client) GetWithQuestions(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/set_form_v1.SetFormV1/GetWithQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetFormV1Server is the server API for SetFormV1 service.
// All implementations must embed UnimplementedSetFormV1Server
// for forward compatibility
type SetFormV1Server interface {
	GetWithQuestions(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedSetFormV1Server()
}

// UnimplementedSetFormV1Server must be embedded to have forward compatible implementations.
type UnimplementedSetFormV1Server struct {
}

func (UnimplementedSetFormV1Server) GetWithQuestions(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithQuestions not implemented")
}
func (UnimplementedSetFormV1Server) mustEmbedUnimplementedSetFormV1Server() {}

// UnsafeSetFormV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetFormV1Server will
// result in compilation errors.
type UnsafeSetFormV1Server interface {
	mustEmbedUnimplementedSetFormV1Server()
}

func RegisterSetFormV1Server(s grpc.ServiceRegistrar, srv SetFormV1Server) {
	s.RegisterService(&SetFormV1_ServiceDesc, srv)
}

func _SetFormV1_GetWithQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetFormV1Server).GetWithQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/set_form_v1.SetFormV1/GetWithQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetFormV1Server).GetWithQuestions(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SetFormV1_ServiceDesc is the grpc.ServiceDesc for SetFormV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetFormV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "set_form_v1.SetFormV1",
	HandlerType: (*SetFormV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWithQuestions",
			Handler:    _SetFormV1_GetWithQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "set_form.proto",
}
